*surround.txt* Plugin for manipulating surroundings

OriginalAuthor: Tim Pope
Author: matsuhav
License: Same terms as Vim itself (see |license|)

INTRODUCTION							*surround*

This plugin provide a commands to manipulate surroundings like |text-objects|.
surround.
Examples: * is cursor position:
	Old text		Command		New text ~
	"Hello *world!"		ds"		Hello world!
	[123+4*56]/2		cs])		(123+456)/2
	"Look ma, I'm *HTML!"	cs"tq>		<q>Look ma, I'm HTML!</q>
	if *x>3 {		ysW(		if ( x>3 ) {
	my $str = *whee!;	vllllS'		my $str = 'whee!';
	<a attr>tag</a>		csTtb		<b attr>tag</b>
	func(a*rgs)		dsf		args

The difference from original is that you can |ds| and |cs| |surround-target|.
`dsf` in above example is not possible with original. And you can use more
then one charactor to specify |surround-target|.

MAPPINGS						*surround-mappings*

Normal mode mappings: ~
	*ds* is "Delete surroundings" ,
	*cs* is "Change surroundings",
	*ys* is "Surround region specified by |motion|",
	*yss* is "Surround a line"
	And *cS* , *yS* , *ySs* and *ySS* put the surrounded result as an
	independent line.

Visual mode mappings: ~
	*S* is "Surround region"
	And *gS*  put surrounded result as an independent line.

SYNTAX				*surround-target* *surround-replacement*
				*{surround-target}* *{surround-replacement}*

Normal mode mappings: ~
	|ds| {surround-target}
	|cs| {surround-target} {surround-replacement}
	|ys| {motion} {surround-replacement}
	|yss| {surround-replacement}
Visual mode mappings: ~
	|S| {surround-replacement}

CUSTOMIZING			*surround-customizing* *surround-variables*

g:surround_enable_default_dict		*g:surround_enable_default_dict*
	Set 0 to disable default surroundings.

g:surround_dict b:surround_dict		*g:surround_dict* *b:surround_dict*
	Add surroundings global or buffer-local.
	For example, default dict is >
	let s:surround_dict_default = {
			\ '  ': ' \r ',
			\ 'b': '(\r)',
			\ '(': '( \r )',
			\ ')': '(\r)',
			\ 'B': '{\r}',
			\ ' B': ' {\r}',
			\ '{': '{ \r }',
			\ '}': '{\r}',
			\ 'a': '<\r>',
			\ '<': '< \r >',
			\ '>': '<\r>',
			\ 'A': '[\r]',
			\ '[': '[ \r ]',
			\ ']': '[\r]',
			\ '''': '''\r''',
			\ '"': '"\r"',
			\ ',': ',\r,',
			\ 'p': '\n\r\n\n',
			\ '': '{\n\t\r\n}',
			\ 't': '<\1>\r</\1>',
			\ 'T': '<\1 \r</\1>',
			\ 'l': '\\begin{\1}\r\\end{\1}',
			\ '\': '\\begin{\1}\r\\end{\1}',
			\ 'f': '\1(\r)',
			\ 'F': '\1( \r )',
			\ 'Ra': '>\r<',
			\ '|': '|\r|',
			\ 's': '\\\r\\',
			\ ':': ':\r:',
			\ '`': '`\r`',
			\ '*': '*\r*',
			\ }
<
	And I added these to my vimrc to perform multibyte surroundings: >
	let g:surround_dict = {
			\ 'mk': '「\r」',
			\ 'mn': '『\r』',
			\ 'mb': '（\r）',
			\ 'ms': '【\r】',
			\ 'ma': '［\r］',
			\ }
<
	"\r" indicates the surrounded text.
	You have to use two backslash to express a backslash.
	You can include newline and tab with \n and \t.
	"\1" will be replaced with your input when it appeared in
	|surround-replacement|. When used in |surround-target|, it is replaced
	with |keyword| regexp. >

	You can add surroundings per filetype by using |ftplugin|.
	Example: "~/.vim/ftplugin/text.vim"
		`ysiWU` will surround a |WORD| with "https://" and "/" when
		editing text file >
		let b:surround_dict = {'U': 'https://\r/'}

g:surround_max_subexp				*g:surround_max_subexp*
	The max number of "\1", "\2", ... used in |surround_dict|.
	Default: 3

g:surround_enable_default_cmap		*g:surround_enable_default_cmap*
	Set 0 to disable default cmaps when you enter text for "\1"s.

g:surround_cmap b:surround_cmap		*g:surround_cmap* *b:surround_cmap*
	Add cmap when you input text. "key" is a key from |surround_dict|,
	"value" is a dictionary which contains map-mapto pairs.
	For example, default cmap is >
	let s:surround_cmap_default = {
			\ 't': {'>': ''},
			\ 'l': {'}': ''},
			\ '\': {'}': ''},
			\ }
<
g:surround_enable_reindent b:surround_enable_reindent
		*g:surround_enable_reindent* *b:surround_enable_reindent*
	Set 0 to disable reindent after surround manipulation.
	By default, reindent always happen. Reindentation is performed by |=|
	and it shouldn't do harm. However, when you have your own indent
	style, you may want to disable it.
	It is good idea to enable for source code filetypes. `ds B` deletes
	C-style block and reindentation will show us how scope changed.
	if (ok) {
		printf("Yes!\n");
		printf("No?\n");
	}
	`ds B`
	if (ok)
		printf("Yes!\n");
	printf("No?\n");

g:surround_putcursorafter b:surround_putcursorafter
		*g:surround_putcursorafter* *b:surround_putcursorafter*
	Set 1 to put cursor after the surrounded text.
	Useful when you do search-and-edit loop.

g:surround_enable_default_mappings	*g:surround_enable_default_mappings*
	Set 0 to disable default |ds|, |cs| and |ys| mappings.
	You can still map any keys. See surround.vim and search
	|g:surround_enable_default_mappings|.

RECOMMENDATION						*surround-recommend*
If you install tpope/vim-repeat <https://github.com/tpope/vim-repeat>, you can
repeat normal mode surround with "dot" |.|.

If you want to use |surround-target| for |ys|, you can use
kana/vim-textobj-user <https://github.com/kana/vim-textobj-user>.
For example, for my vimrc, >
	let s:surround_textobj = {
			\ 'surround-mk': {'pattern': ['「', '」'],
			\ 		'select-a': 'amk', 'select-i': 'imk'},
			\ 'surround-mn': {'pattern': ['『', '』'],
			\ 		'select-a': 'amn', 'select-i': 'imn'},
			\ 'surround-mb': {'pattern': ['（', '）'],
			\ 		'select-a': 'amb', 'select-i': 'imb'},
			\ 'surround-ms': {'pattern': ['【', '】'],
			\ 		'select-a': 'ams', 'select-i': 'ims'},
			\ 'surround-ma': {'pattern': ['［', '］'],
			\ 		'select-a': 'ama', 'select-i': 'ima'},
			\ }
	silent! call textobj#user#plugin('surround', s:surround_textobj)
<

KNOWN PROBLEMS						*surround-issues*

You cannot install other surround.vim at the same time.
Complex surround which the original has is not supported yet.
Visual mode "dot" repeat doesn't work.

 vim:tw=78:ts=8:noet:ft=help:norl:
